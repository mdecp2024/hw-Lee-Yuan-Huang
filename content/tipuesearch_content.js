var tipuesearch = {"pages": [{'title': 'First', 'text': '', 'tags': '', 'url': 'First.html'}, {'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:\xa0 fqpabi8 \n \n 個人倉儲:  https://github.com/mdecp2024/hw-mdecycu \xa0 \n 個人網站:   https://mdecp2024.github.io/hw-Lee-Yuan-Huang/ \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'w3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材: \xa0 https://www.learnpythonwithjupyter.com/ \xa0 - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n \n 下載\xa0 python_2025_lite.7z \xa0(可攜程式環境) \n 下載 \xa0 zmq_remote_api_ex_cube_triangle.7z \xa0(利用 Python 控制模擬場景中的物件) \n 進入可攜程式環境中 data/CoppeliaSim 目錄, 開啟 coppeliaSim.exe (機電整合模擬程式, \xa0 原始碼 ) \n 啟動可攜程式環境, 雙點擊 start_ipv6.bat, 系統會啟動四個命令列, 兩個 SciTE 編輯器 \n 執行場景控制程式前, 先處理操作系統的防火牆, 將下列指令存為 .bat 檔案後, 以管理員身分執行, 以便開啟 23000-23050 埠號進出: \n netsh advfirewall firewall add rule name="allow_23000-23050" dir=in action=allow protocol=TCP localport=23000-23050 netsh advfirewall firewall add rule name="allow_23000-23050" dir=out action=allow protocol=TCP localport=23000-23050 \n 開啟 CoppeliaSim 中的視覺串流伺服器: Modules - Connectivity - Visualization stream \n 利用 SciTE 開啟\xa0put_cubes_into_scene_1.py, 利用 Tools - Go 執行操控程式 \n 使用者可以透過瀏覽器, 以模擬場景所在電腦的 IP, 且埠號為 23020 觀看模擬場景 \n \n \n \n', 'tags': '', 'url': 'w3.html'}, {'title': 'W7-1', 'text': '\n \n', 'tags': '', 'url': 'W7-1.html'}, {'title': 'W10', 'text': '\n \n \n   \n 製作過程讓我了解AI的強大，用不同的程式回答我的許多疑問 \n \n \n', 'tags': '', 'url': 'W10.html'}, {'title': 'w11_hw', 'text': 'def print_circle():  radius = 4 # 圓的半徑  center_x, center_y = 5, 5 # 圓心座標 \n for y in range(10):  for x in range(10):  # 計算該點到圓心的距離  distance = (x - center_x) ** 2 + (y - center_y) ** 2  # 判斷該點是否在圓內，若在圓內或圓邊界，列印星號  if distance <= radius ** 2:  print(\'*\', end=\'\')  else:  print(\' \', end=\'\')  print() # 換行 \n # 呼叫函式列印圓形 print_circle() \n def print_circle():\n    radius = 4  # 圓的半徑\n    center_x, center_y = 5, 5  # 圓心座標\n\n    for y in range(10):\n        for x in range(10):\n            # 計算該點到圓心的距離\n            distance = (x - center_x) ** 2 + (y - center_y) ** 2\n            # 判斷該點是否在圓內，若在圓內或圓邊界，列印星號\n            if distance <= radius ** 2:\n                print(\'*\', end=\'\')\n            else:\n                print(\' \', end=\'\')\n        print()  # 換行\n\n# 呼叫函式列印圓形\nprint_circle()\n \n \n n = 11  # 總共的行數\nspace = \'_\'\ncenter = n//2\n#print(center)\n\nfor y in range(n):\n    for x in range(n):\n        print("(", x, ", ", y, ")", sep="")\n \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width = 400, height = 400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 每一格的 pixel 數\ngs = 20\n\n#gs*tc = canvas width and height\n\nctx = canvas.getContext("2d")\nwidth = 11\nheight = 11\n\n\nfor i in range(width):\n     for j in range(height):\n        #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")\n         ctx.lineWidth = 1\n         ctx.strokeStyle = \'red\'\n         ctx.beginPath();\n         ctx.rect(i*gs,j*gs,gs,gs)\n         ctx.stroke();\n\nfrom browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width = 400, height = 400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 每一格的 pixel 數\ngs = 20\n\n#gs*tc = canvas width and height\n\nctx = canvas.getContext("2d")\nwidth = 11\nheight = 11\n\n\nfor i in range(width):\n     for j in range(height):\n        #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")\n         ctx.lineWidth = 1\n         ctx.strokeStyle = \'red\'\n         ctx.beginPath();\n         ctx.rect(i*gs,j*gs,gs,gs)\n         ctx.stroke();\n\n \n \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w13', 'text': '一個格子 \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width = 400,height = 400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 每一格的 pixel 數\ngs = 200\n\n# gs*tc = canvas width and height\n\nctx = canvas.getContext("2d")\n\nwidth=1\nheight=1\n\nfor i in range(width): \n    for j in range(height):\n     #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")\n     ctx.lineWidth=1\n     ctx.strokeStyle=\'red\'\n     ctx.beginPath();\n     ctx.rect(i*gs,j*gs,gs,gs)\n     ctx.stroke();\n     \nfor i in range(width): \n    for j in range(height):\n     #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")\n     ctx.lineWidth=1\n     ctx.strokeStyle=\'red\'\n     ctx.beginPath();\n     ctx.rect(i*gs+50,j*gs+50,gs,gs)\n     ctx.stroke(); \n 兩個格子 \n from browser import html, document as doc, window\n\n# Create canvas element\n\ncanvas = html.CANVAS(width=500, height=500)  # Increase canvas size to ensure circles are fully visible\n\nbrython_div = doc["brython_div1"]\n\nbrython_div <= canvas\n\n# Get the drawing context of the canvas\n\nctx = canvas.getContext("2d")\n\n# Draw the first empty square at (0, 0)\n\nwidth = 10\n\nheight = 10\n\ngs = 20  # Grid size (for spacing)\n\nctx.lineWidth = 2\n\nctx.strokeStyle = \'red\'  # Color for the first square\n\nctx.beginPath()\n\nctx.rect(50, 50, width * gs, height * gs)  # Draw a hollow square with offset (50, 50)\n\nctx.stroke()\n\n# Draw the second empty square at (100, 100)\n\noffset_x = 150  # Change the x-coordinate to give more space\n\noffset_y = 150  # Change the y-coordinate to give more space\n\nwidth2 = 10\n\nheight2 = 10\n\nctx.lineWidth = 2\n\nctx.strokeStyle = \'red\'  # Color for the second square\n\nctx.beginPath()\n\nctx.rect(offset_x, offset_y, width2 * gs, height2 * gs)  # Draw another hollow square\n\nctx.stroke()\n\n# Function to draw a circle around a square\n\ndef draw_outer_circle(x, y, width, height):\n\n    # Calculate the radius of the outer circle (half of the diagonal of the square)\n\n    radius = window.Math.sqrt(width ** 2 + height ** 2) / 2\n\n    # Calculate the center of the square\n\n    center_x = x + width * gs / 2\n\n    center_y = y + height * gs / 2\n\n    # Draw the outer circle\n\n    ctx.beginPath()\n\n    ctx.arc(center_x, center_y, radius * gs, 0, 2 * window.Math.PI)\n\n    ctx.strokeStyle = \'black\'  # Color for the outer circle\n\n    ctx.lineWidth = 2\n\n    ctx.stroke()\n\n# Draw outer circles around both squares\n\ndraw_outer_circle(50, 50, width, height)  # For the first square\n\ndraw_outer_circle(offset_x, offset_y, width2, height2)  # For the second square\n\n# Create the context menu\n\ncontext_menu = html.DIV(style={"position": "absolute", "display": "none", "background-color": "#fff", "border": "1px solid #ccc", "padding": "5px"})\n\ncontext_menu <= html.BUTTON("Option 1: Clear Canvas")\n\ncontext_menu <= html.BUTTON("Option 2: Draw Circle")\n\nbrython_div <= context_menu\n\n# Function to show context menu\n\ndef show_context_menu(event):\n\n    event.preventDefault()  # Prevent the default right-click menu\n\n    context_menu.style.display = "block"  # Show custom context menu\n\n    context_menu.style.left = f"{event.pageX}px"  # Set the position of the menu\n\n    context_menu.style.top = f"{event.pageY}px"\n\n# Hide the context menu when clicking elsewhere\n\ndef hide_context_menu(event):\n\n    context_menu.style.display = "none"\n\n# Attach right-click (contextmenu) event to the canvas\n\ncanvas.bind("contextmenu", show_context_menu)\n\n# Attach click event to document to hide the menu when clicking elsewhere\n\ndocument.bind("click", hide_context_menu)\n\n# Function for the menu options\n\ndef clear_canvas(event):\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height)  # Clear the canvas\n\n    context_menu.style.display = "none"  # Hide the context menu after action\n\ndef draw_circle(event):\n\n    ctx.beginPath()\n\n    ctx.arc(200, 200, 50, 0, 2 * window.Math.PI)  # Draw a circle at the center\n\n    ctx.strokeStyle = \'green\'\n\n    ctx.stroke()\n\n    context_menu.style.display = "none"  # Hide the context menu after action\n\n# Attach actions to context menu buttons\n\ncontext_menu.children[0].bind("click", clear_canvas)  # First button: Clear canvas\n\ncontext_menu.children[1].bind("click", draw_circle)  # Second button: Draw a circle\n  \n', 'tags': '', 'url': 'w13.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 2.html'}, {'title': 'W7-2', 'text': '', 'tags': '', 'url': 'W7-2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n \n 下載\xa0 python_2025_lite.7z \xa0(可攜程式環境) \n 下載 \xa0 zmq_remote_api_ex_cube_triangle.7z \xa0(利用 Python 控制模擬場景中的物件) \n 進入可攜程式環境中 data/CoppeliaSim 目錄, 開啟 coppeliaSim.exe (機電整合模擬程式, \xa0 原始碼 ) \n 啟動可攜程式環境, 雙點擊 start_ipv6.bat, 系統會啟動四個命令列, 兩個 SciTE 編輯器 \n 執行場景控制程式前, 先處理操作系統的防火牆, 將下列指令存為 .bat 檔案後, 以管理員身分執行, 以便開啟 23000-23050 埠號進出: \n netsh advfirewall firewall add rule name="allow_23000-23050" dir=in action=allow protocol=TCP localport=23000-23050 netsh advfirewall firewall add rule name="allow_23000-23050" dir=out action=allow protocol=TCP localport=23000-23050 \n 開啟 CoppeliaSim 中的視覺串流伺服器: Modules - Connectivity - Visualization stream \n 利用 SciTE 開啟\xa0put_cubes_into_scene_1.py, 利用 Tools - Go 執行操控程式 \n 使用者可以透過瀏覽器, 以模擬場景所在電腦的 IP, 且埠號為 23020 觀看模擬場景 \n \n \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'w7', 'text': "n = 5 # 總共的行數   for i in range(n): # 對於每一行 \n  # 印出空格  print(' ' * (n - i - 1), end='') # 在每行前面印出空格  # 印出星號  print('*' * (2 * i + 1)) # 每行印出 2*i + 1 個星號 \n", 'tags': '', 'url': 'w7.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};