<h1>First</h1>
<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>fqpabi8</span></p>
<p></p>
<p>個人倉儲: <span data-teams="true"><span class="ui-provider jo oz pa pb pc pd pe pf pg ph pi pj pk pl pm pn po pp pq pr ps pt pu pv pw px py pz qa qb qc qd qe qf qg" dir="ltr"><a aria-label="連結 https://github.com/mdecp2024/hw-mdecycu" class="fui-Link ___1q1shib f2hkw1w f3rmtva f1ewtqcl fyind8e f1k6fduh f1w7gpdv fk6fouc fjoy568 figsok6 f1s184ao f1mk8lai fnbmjn9 f1o700av f13mvf36 f1cmlufx f9n3di6 f1ids18y f1tx3yz7 f1deo86v f1eh06m1 f1iescvh fhgqx19 f1olyrje f1p93eir f1nev41a f1h8hb77 f1lqvz6u f10aw75t fsle3fq f17ae5zn" href="https://github.com/mdecp2024/hw-mdecycu" id="menur84" rel="noreferrer noopener" target="_blank" title="https://github.com/mdecp2024/hw-mdecycu">https://github.com/mdecp2024/hw-mdecycu</a> </span></span></p>
<p>個人網站:<span> <a class="Link--inTextBlock" href="https://mdecp2024.github.io/hw-Lee-Yuan-Huang/">https://mdecp2024.github.io/hw-Lee-Yuan-Huang/</a></span></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<p></p>
<h3>w3</h3>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材:<span> </span><a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a><span> </span>- PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<ol>
<li>下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (可攜程式環境)</li>
<li>下載<span> </span><a href="https://mde.tw/cp2024/downloads/zmq_remote_api_ex_cube_triangle.7z">zmq_remote_api_ex_cube_triangle.7z</a> (利用 Python 控制模擬場景中的物件)</li>
<li>進入可攜程式環境中 data/CoppeliaSim 目錄, 開啟 coppeliaSim.exe (機電整合模擬程式,<span> </span><a href="https://github.com/CoppeliaRobotics">原始碼</a>)</li>
<li>啟動可攜程式環境, 雙點擊 start_ipv6.bat, 系統會啟動四個命令列, 兩個 SciTE 編輯器</li>
<li>執行場景控制程式前, 先處理操作系統的防火牆, 將下列指令存為 .bat 檔案後, 以管理員身分執行, 以便開啟 23000-23050 埠號進出:</li>
<li>netsh advfirewall firewall add rule name="allow_23000-23050" dir=in action=allow protocol=TCP localport=23000-23050<br/>netsh advfirewall firewall add rule name="allow_23000-23050" dir=out action=allow protocol=TCP localport=23000-23050</li>
<li>開啟 CoppeliaSim 中的視覺串流伺服器: Modules - Connectivity - Visualization stream</li>
<li>利用 SciTE 開啟 put_cubes_into_scene_1.py, 利用 Tools - Go 執行操控程式</li>
<li>使用者可以透過瀏覽器, 以模擬場景所在電腦的 IP, 且埠號為 23020 觀看模擬場景</li>
</ol>
<p><img alt="" height="336" src="/images/螢幕擷取畫面 2024-10-16 121428.png" width="624"/></p>
<p></p>
<h2>W7</h2>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Qh6nt1zAbjk?si=2Vw_AVDILX9xbY2f" title="YouTube video player" width="560"></iframe></p>
<h2>W10</h2>
<p></p>
<pre class="brush:html;auto-links:false;toolbar:false" p=""></pre>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/EiZXQcCpY7Q?si=kL-vVqNCgMezS84N" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/O2SzJe5oYPI?si=u7HkYVNaQ6mkTs-m" title="YouTube video player" width="560"></iframe> <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/NA3Q-fHmBtI?si=_tRj2aBazCkC9G_l" title="YouTube video player" width="560"></iframe></p>
<p><yt-attributed-string class="style-scope ytd-text-inline-expander" user-input=""><span class="yt-core-attributed-string yt-core-attributed-string--white-space-pre-wrap" dir="auto" role="text"><span class="yt-core-attributed-string--link-inherit-color" dir="auto">製作過程讓我了解AI的強大，用不同的程式回答我的許多疑問</span></span></yt-attributed-string></p>
<div class="style-scope ytd-text-inline-expander" id="snippet"></div>
<div class="style-scope ytd-watch-metadata" slot="extra-content"></div>
<h2>w11_hw</h2>
<p>def print_circle():<br/> radius = 4 # 圓的半徑<br/> center_x, center_y = 5, 5 # 圓心座標</p>
<p>for y in range(10):<br/> for x in range(10):<br/> # 計算該點到圓心的距離<br/> distance = (x - center_x) ** 2 + (y - center_y) ** 2<br/> # 判斷該點是否在圓內，若在圓內或圓邊界，列印星號<br/> if distance &lt;= radius ** 2:<br/> print('*', end='')<br/> else:<br/> print(' ', end='')<br/> print() # 換行</p>
<p># 呼叫函式列印圓形<br/>print_circle()</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def print_circle():
    radius = 4  # 圓的半徑
    center_x, center_y = 5, 5  # 圓心座標

    for y in range(10):
        for x in range(10):
            # 計算該點到圓心的距離
            distance = (x - center_x) ** 2 + (y - center_y) ** 2
            # 判斷該點是否在圓內，若在圓內或圓邊界，列印星號
            if distance &lt;= radius ** 2:
                print('*', end='')
            else:
                print(' ', end='')
        print()  # 換行

# 呼叫函式列印圓形
print_circle()
</pre>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/WdreVTL-Wx8?si=5TOuYP_s83lZ0GOI" title="YouTube video player" width="560"></iframe></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">n = 11  # 總共的行數
space = '_'
center = n//2
#print(center)

for y in range(n):
    for x in range(n):
        print("(", x, ", ", y, ")", sep="")
</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width = 400, height = 400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 每一格的 pixel 數
gs = 20

#gs*tc = canvas width and height

ctx = canvas.getContext("2d")
width = 11
height = 11


for i in range(width):
     for j in range(height):
        #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")
         ctx.lineWidth = 1
         ctx.strokeStyle = 'red'
         ctx.beginPath();
         ctx.rect(i*gs,j*gs,gs,gs)
         ctx.stroke();

from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width = 400, height = 400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 每一格的 pixel 數
gs = 20

#gs*tc = canvas width and height

ctx = canvas.getContext("2d")
width = 11
height = 11


for i in range(width):
     for j in range(height):
        #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")
         ctx.lineWidth = 1
         ctx.strokeStyle = 'red'
         ctx.beginPath();
         ctx.rect(i*gs,j*gs,gs,gs)
         ctx.stroke();

</pre>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, window
from urllib.parse import urlparse, parse_qs

# 當前頁面的 URL
current_url = window.location.href

# 解析 URL，提取 page_title 參數
parsed_url = urlparse(current_url)
query_params = parse_qs(parsed_url.query)
page_title = query_params.get("page_title", ["w10"])[0]  # 默認為 'w10'，如果沒有該參數

#print(page_title)

url = "https://mde.tw/list/1b.txt"
data = open(url).read()
line_data = data.split("\n")[1:]

div = document.getElementById("brython_div1")

for line in line_data[:-1]:
    stud_data = line.split("\t")
    stud_num = stud_data[1]
    github = stud_data[2]
    page_url = f"https://mdecp2024.github.io/hw-{github}/content/{page_title}.html"
    main_url = f"https://mdecp2024.github.io/hw-{github}/content/index.html"

    try:
        # 嘗試獲取 page_title.html 頁面
        page_response = open(page_url).read()
        if page_response != "":
            # 如果頁面存在，則顯示學號連結
            a = document.createElement("a")
            a.href = page_url
            a.text = stud_num + ", " + page_title
            a.style.marginRight = "10px"  # 調整間距
            
    except Exception as e:
        # 處理例外情況
        # 沒有目標頁面, 則顯示其主頁
        a = document.createElement("a")
        a.href = main_url
        a.text = stud_num
        a.style.marginRight = "10px"  # 調整間距

    # 創建一個新的 div 來包裝連結
    link_div = document.createElement("div")
    link_div.appendChild(a)
    div.appendChild(link_div)  # 將新的 div 添加到主 div 中</pre>
<p><br/><br/><br/></p>
<h2>w12_hw</h2>
<p><span> 請各組組員分別利用 </span><span>Brython 以及 Jupyter lab</span><span> 環境, 執行</span><a href="http://229.cycu.org/python_2025_lite.7z">可攜程式</a><span> notebook 目錄中的 </span><span>01_string_input_print.ipynb 至 10_for_search.ipynb</span><span> 筆記本程式, 完成後請將能在 Brython 執行的程式碼存入個人 </span><span>Gist</span><span> 後, 將各程式執行連結放入 w12_hw 網頁上. 最後請說明各範例中所使用的程式語法以及執行心得.</span></p>
<p><a href="https://mdecp2024.github.io/hw-ZJJ41323248/content/Brython.html?src=https://gist.githubusercontent.com/ZJJ41323248/a005f9f6f05070d54e4d8bb57bf24533/raw/55818e038b5a51fe96dcf97f51439196bbcb0a7e/hw_Q1">01_string_input_print.ipynb</a> <span> </span><a href="https://mdecp2024.github.io/hw-ZJJ41323248/content/Brython.html?src=https://gist.githubusercontent.com/ZJJ41323248/a005f9f6f05070d54e4d8bb57bf24533/raw/bbeafe1ed8b2112bebaae6dd9bfe560795281cd4/Q2.py">02_variables.ipynb</a> </p>
<p><a href="https://mdecp2024.github.io/hw-ZJJ41323248/content/Brython.html?src=https://gist.githubusercontent.com/ZJJ41323248/a005f9f6f05070d54e4d8bb57bf24533/raw/bbeafe1ed8b2112bebaae6dd9bfe560795281cd4/Q3.py">03_list_if_in_else.ipynb</a> <span> </span><a href="https://mdecp2024.github.io/hw-ZJJ41323248/content/Brython.html?src=https://gist.githubusercontent.com/ZJJ41323248/a005f9f6f05070d54e4d8bb57bf24533/raw/bbeafe1ed8b2112bebaae6dd9bfe560795281cd4/Q4.py">04_list_append_remove.ipynb</a></p>
<p><a href="https://mdecp2024.github.io/hw-ZJJ41323248/content/Brython.html?src=https://gist.githubusercontent.com/ZJJ41323248/a005f9f6f05070d54e4d8bb57bf24533/raw/bbeafe1ed8b2112bebaae6dd9bfe560795281cd4/Q5.py">05_list_index_pop_insert.ipynb </a><span> </span><a href="https://mdecp2024.github.io/hw-ZJJ41323248/content/Brython.html?src=https://gist.githubusercontent.com/ZJJ41323248/a005f9f6f05070d54e4d8bb57bf24533/raw/bbeafe1ed8b2112bebaae6dd9bfe560795281cd4/Q6.py">06_list_slicing.ipynb</a> </p>
<p><a href="https://mdecp2024.github.io/hw-ZJJ41323248/content/Brython.html?src=https://gist.githubusercontent.com/ZJJ41323248/a005f9f6f05070d54e4d8bb57bf24533/raw/bbeafe1ed8b2112bebaae6dd9bfe560795281cd4/Q7.py">07_list_slicing_use.ipynb</a> <span> </span><a href="https://mdecp2024.github.io/hw-ZJJ41323248/content/Brython.html?src=https://gist.githubusercontent.com/ZJJ41323248/a005f9f6f05070d54e4d8bb57bf24533/raw/bbeafe1ed8b2112bebaae6dd9bfe560795281cd4/Q8.py">08_for_range.ipynb</a></p>
<p><a href="https://mdecp2024.github.io/hw-ZJJ41323248/content/Brython.html?src=https://gist.githubusercontent.com/ZJJ41323248/a005f9f6f05070d54e4d8bb57bf24533/raw/bbeafe1ed8b2112bebaae6dd9bfe560795281cd4/Q9.py">09_for_loop_if_equals.ipynb</a> <span> </span><a href="https://mdecp2024.github.io/hw-ZJJ41323248/content/Brython.html?src=https://gist.githubusercontent.com/ZJJ41323248/a005f9f6f05070d54e4d8bb57bf24533/raw/bbeafe1ed8b2112bebaae6dd9bfe560795281cd4/Q10.py">10_for_search.ipynb</a></p>
<p>語法:Python</p>
<p>心得:</p><h2>w13_hw</h2>
<p>一個格子</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width = 400,height = 400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 每一格的 pixel 數
gs = 200

# gs*tc = canvas width and height

ctx = canvas.getContext("2d")

width=1
height=1

for i in range(width): 
    for j in range(height):
     #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")
     ctx.lineWidth=1
     ctx.strokeStyle='red'
     ctx.beginPath();
     ctx.rect(i*gs,j*gs,gs,gs)
     ctx.stroke();
     
for i in range(width): 
    for j in range(height):
     #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")
     ctx.lineWidth=1
     ctx.strokeStyle='red'
     ctx.beginPath();
     ctx.rect(i*gs+50,j*gs+50,gs,gs)
     ctx.stroke();</pre>
<p>兩個格子</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document as doc, window

# Create canvas element

canvas = html.CANVAS(width=500, height=500)  # Increase canvas size to ensure circles are fully visible

brython_div = doc["brython_div1"]

brython_div &lt;= canvas

# Get the drawing context of the canvas

ctx = canvas.getContext("2d")

# Draw the first empty square at (0, 0)

width = 10

height = 10

gs = 20  # Grid size (for spacing)

ctx.lineWidth = 2

ctx.strokeStyle = 'red'  # Color for the first square

ctx.beginPath()

ctx.rect(50, 50, width * gs, height * gs)  # Draw a hollow square with offset (50, 50)

ctx.stroke()

# Draw the second empty square at (100, 100)

offset_x = 150  # Change the x-coordinate to give more space

offset_y = 150  # Change the y-coordinate to give more space

width2 = 10

height2 = 10

ctx.lineWidth = 2

ctx.strokeStyle = 'red'  # Color for the second square

ctx.beginPath()

ctx.rect(offset_x, offset_y, width2 * gs, height2 * gs)  # Draw another hollow square

ctx.stroke()

# Function to draw a circle around a square

def draw_outer_circle(x, y, width, height):

    # Calculate the radius of the outer circle (half of the diagonal of the square)

    radius = window.Math.sqrt(width ** 2 + height ** 2) / 2

    # Calculate the center of the square

    center_x = x + width * gs / 2

    center_y = y + height * gs / 2

    # Draw the outer circle

    ctx.beginPath()

    ctx.arc(center_x, center_y, radius * gs, 0, 2 * window.Math.PI)

    ctx.strokeStyle = 'black'  # Color for the outer circle

    ctx.lineWidth = 2

    ctx.stroke()

# Draw outer circles around both squares

draw_outer_circle(50, 50, width, height)  # For the first square

draw_outer_circle(offset_x, offset_y, width2, height2)  # For the second square

# Create the context menu

context_menu = html.DIV(style={"position": "absolute", "display": "none", "background-color": "#fff", "border": "1px solid #ccc", "padding": "5px"})

context_menu &lt;= html.BUTTON("Option 1: Clear Canvas")

context_menu &lt;= html.BUTTON("Option 2: Draw Circle")

brython_div &lt;= context_menu

# Function to show context menu

def show_context_menu(event):

    event.preventDefault()  # Prevent the default right-click menu

    context_menu.style.display = "block"  # Show custom context menu

    context_menu.style.left = f"{event.pageX}px"  # Set the position of the menu

    context_menu.style.top = f"{event.pageY}px"

# Hide the context menu when clicking elsewhere

def hide_context_menu(event):

    context_menu.style.display = "none"

# Attach right-click (contextmenu) event to the canvas

canvas.bind("contextmenu", show_context_menu)

# Attach click event to document to hide the menu when clicking elsewhere

document.bind("click", hide_context_menu)

# Function for the menu options

def clear_canvas(event):

    ctx.clearRect(0, 0, canvas.width, canvas.height)  # Clear the canvas

    context_menu.style.display = "none"  # Hide the context menu after action

def draw_circle(event):

    ctx.beginPath()

    ctx.arc(200, 200, 50, 0, 2 * window.Math.PI)  # Draw a circle at the center

    ctx.strokeStyle = 'green'

    ctx.stroke()

    context_menu.style.display = "none"  # Hide the context menu after action

# Attach actions to context menu buttons

context_menu.children[0].bind("click", clear_canvas)  # First button: Clear canvas

context_menu.children[1].bind("click", draw_circle)  # Second button: Draw a circle
 </pre>
<p></p>
<h2>w15</h2>
<p>題目一: 從 1 累加到 100"作為 anchor 的連結標題</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">print(sum(range(1, 101)))</pre>
<p>1.當你寫 sum(range(1, 101)) 時，這其實是兩個東西在一起發揮作用。</p>
<p>2.range(1, 101)：</p>
<p>這個部分就像是告訴電腦：「嘿，我想要一個數字的清單，從 1 開始，一直到 100」。所以 range(1, 101) 會產生一個數字序列：1, 2, 3, … 一直到 100。</p>
<p>3.sum()：</p>
<p>接下來，sum() 是讓電腦將這些數字加起來。也就是說，sum(range(1, 101)) 就是讓電腦將從 1 到 100 的數字都加起來，然後算出總和。</p>
<p>4.總和=2100×(1+100)=2100×101=5050</p>
<p>題目二: 以"addto"作為連結標題</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def addto(init, upto): # 使用公式計算總和 sum_upto = upto * (upto + 1) // 2 sum_init_minus_1 = (init - 1) * init // 2 return sum_upto - sum_init_minus_1 # 主程式 init = 1 upto = 100 # 呼叫 addto 函式 result = addto(init, upto) print(f"從{init}累加到{upto}={result}")</pre>
<p>題目三: add_only_even 作為連結標題.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def addto(init, upto):
    # 計算從 init 到 upto 之間所有偶數的和
    # 找到範圍內的第一個偶數
    if init % 2 != 0:
        init += 1  # 若起始數字為奇數，則跳過此數字，從下一個偶數開始
     
    # 找到範圍內的最後一個偶數
    if upto % 2 != 0:
        upto -= 1  # 若終止數字為奇數，則調整為上一個偶數
     
    # 偶數總和公式：等差數列求和
    n = (upto - init) // 2 + 1  # 計算偶數的個數
    sum_even = n * (init + upto) // 2  # 等差數列求和公式：n * (首項 + 末項) / 2
     
    return sum_even
 
# 主程式
init = 1
upto = 100
# 呼叫 addto 函式
result = addto(init, upto)
print(f"從{init}累加到{upto}的偶數和={result}")</pre>
<p>題目四: 以 add_avoid_8 作為連結標題.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def addto(init, upto):
    # 找到範圍內的第一個尾數為 8 的數字
    if init % 10 &lt;= 8:
        start = init + (8 - init % 10)
    else:
        start = init + (18 - init % 10)
     
    # 找到範圍內的最後一個尾數為 8 的數字
    if upto % 10 &gt;= 8:
        end = upto - (upto % 10 - 8)
    else:
        end = upto - (upto % 10 + 2)
     
    # 如果 start &gt; end，則沒有符合條件的數字
    if start &gt; end:
        return 0
     
    # 計算這些數字的總和
    n = (end - start) // 10 + 1  # 這些數字的個數
    total_sum = n * (start + end) // 2  # 等差數列求和公式：n * (首項 + 末項) / 2
     
    return total_sum
 
# 主程式
init = 1
upto = 100
# 呼叫 addto 函式
result = addto(init, upto)
print(f"從{init}累加到{upto}，只加尾數為8的數={result}")</pre>
<p></p><h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>W7</h2>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<ol>
<li>下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (可攜程式環境)</li>
<li>下載<span> </span><a href="https://mde.tw/cp2024/downloads/zmq_remote_api_ex_cube_triangle.7z">zmq_remote_api_ex_cube_triangle.7z</a> (利用 Python 控制模擬場景中的物件)</li>
<li>進入可攜程式環境中 data/CoppeliaSim 目錄, 開啟 coppeliaSim.exe (機電整合模擬程式,<span> </span><a href="https://github.com/CoppeliaRobotics">原始碼</a>)</li>
<li>啟動可攜程式環境, 雙點擊 start_ipv6.bat, 系統會啟動四個命令列, 兩個 SciTE 編輯器</li>
<li>執行場景控制程式前, 先處理操作系統的防火牆, 將下列指令存為 .bat 檔案後, 以管理員身分執行, 以便開啟 23000-23050 埠號進出:</li>
<li>netsh advfirewall firewall add rule name="allow_23000-23050" dir=in action=allow protocol=TCP localport=23000-23050<br/>netsh advfirewall firewall add rule name="allow_23000-23050" dir=out action=allow protocol=TCP localport=23000-23050</li>
<li>開啟 CoppeliaSim 中的視覺串流伺服器: Modules - Connectivity - Visualization stream</li>
<li>利用 SciTE 開啟 put_cubes_into_scene_1.py, 利用 Tools - Go 執行操控程式</li>
<li>使用者可以透過瀏覽器, 以模擬場景所在電腦的 IP, 且埠號為 23020 觀看模擬場景</li>
</ol>
<p><img alt="" height="336" src="/images/螢幕擷取畫面 2024-10-16 121428.png" width="624"/></p>
<h2>w7</h2>
<p>n = 5 # 總共的行數<br/> <br/>for i in range(n): # 對於每一行</p>
<p><br/><br/> # 印出空格<br/> print(' ' * (n - i - 1), end='') # 在每行前面印出空格<br/> # 印出星號<br/> print('*' * (2 * i + 1)) # 每行印出 2*i + 1 個星號</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<p>           </p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>